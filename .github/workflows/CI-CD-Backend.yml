name: Java CI/CD with Gradle

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_TOKEN }}
          submodules: true

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: gradlew 권한 부여
        run: chmod +x gradlew

      - name: Gradle 통해 빌드
        run: ./gradlew clean build

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 이름 및 환경 설정
        run: |
          BRANCH_REF_NAME="${{ github.ref_name }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_REF_NAME="${{ github.event.pull_request.base.ref }}"
          fi

          if [[ "${BRANCH_REF_NAME}" == "main" ]]; then
            echo "IMAGE_NAME=fashion-forecast-prod" >> $GITHUB_ENV
          elif [[ "${BRANCH_REF_NAME}" == "develop" ]]; then
            echo "IMAGE_NAME=fashion-forecast-dev" >> $GITHUB_ENV
          fi

      - name: 도커 빌드 & 푸시
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4

      - name: 배포 타겟 설정
        run: |
          if [[ "${BRANCH_REF_NAME}" == "main" ]]; then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          elif [[ "${BRANCH_REF_NAME}" == "develop" ]]; then
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          fi

      - name: Docker Compose 파일 EC2로 복사
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_DEV_HOST }}
          username: ${{ secrets.EC2_DEV_USERNAME }}
          key: ${{ secrets.EC2_DEV_PRIVATE_KEY }}
          source: "docker-compose-${{ env.DEPLOY_ENV }}.yml"
          target: "/home/ubuntu"

      - name: EC2 원격 접속 및 Docker compose
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.EC2_DEV_USERNAME }}
          host: ${{ secrets.EC2_DEV_HOST }}
          key: ${{ secrets.EC2_DEV_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu
            sudo docker compose -f docker-compose-${{ env.DEPLOY_ENV }}.yml down --rmi all
            sudo docker compose -f docker-compose-${{ env.DEPLOY_ENV }}.yml up -d
            sudo docker image prune -f
