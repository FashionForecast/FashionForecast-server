name: Java CI with Gradle

on:
  pull_request:
    branches: [ develop ]
  push:
    branches: [ develop ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      pull-requests: write

    steps:
      - name: 레포지토리 체크아웃
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_TOKEN }}
          submodules: true

      - name: JDK 17을 설치합니다.
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: gradlew 권한을 부여합니다.
        run: chmod +x gradlew

      - name: Gradle을 통해 빌드합니다.
        run: ./gradlew clean build

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker 이미지 이름 설정
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "IMAGE_NAME=fashion-forecast-prod" >> $GITHUB_ENV
          else
          echo "IMAGE_NAME=fashion-forecast-dev" >> $GITHUB_ENV
          fi

      - name: 메타데이터 설정
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}

      - name: 도커 빌드 & 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: 빌드된 JAR 파일에서 정적 파일 확인
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" | head -n 1)
          echo "Checking for static files in $JAR_FILE"
          unzip -l $JAR_FILE | grep -E 'static/|public/'






